{
  "_args": [
    [
      {
        "raw": "send-transform@https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
        "scope": null,
        "escapedName": "send-transform",
        "name": "send-transform",
        "rawSpec": "https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
        "spec": "https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
        "type": "remote"
      },
      "F:\\A\\_work\\1\\s"
    ]
  ],
  "_from": "send-transform@>=0.14.0 <0.15.0",
  "_id": "send-transform@0.14.1",
  "_inCache": true,
  "_location": "/send-transform",
  "_phantomChildren": {},
  "_requested": {
    "raw": "send-transform@https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
    "scope": null,
    "escapedName": "send-transform",
    "name": "send-transform",
    "rawSpec": "https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
    "spec": "https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/cordova-simulate"
  ],
  "_resolved": "https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
  "_shasum": "78eb79fcb3054712501bbaf0fd09602cb4660996",
  "_shrinkwrap": null,
  "_spec": "send-transform@https://registry.npmjs.org/send-transform/-/send-transform-0.14.1.tgz",
  "_where": "F:\\A\\_work\\1\\s",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "bugs": {
    "url": "https://github.com/timbarham/send/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Tim Barham",
      "email": "tim.barham@microsoft.com"
    }
  ],
  "dependencies": {
    "debug": "~2.2.0",
    "depd": "~1.1.0",
    "destroy": "~1.0.4",
    "encodeurl": "~1.0.1",
    "escape-html": "~1.0.3",
    "etag": "~1.7.0",
    "fresh": "0.3.0",
    "http-errors": "~1.5.0",
    "mime": "1.3.4",
    "ms": "0.7.1",
    "on-finished": "~2.3.0",
    "range-parser": "~1.2.0",
    "statuses": "~1.3.0"
  },
  "description": "Better streaming static file server with transform, Range and conditional-GET support",
  "devDependencies": {
    "after": "0.8.1",
    "eslint": "2.11.1",
    "eslint-config-standard": "5.3.1",
    "eslint-plugin-promise": "1.3.1",
    "eslint-plugin-standard": "1.3.2",
    "istanbul": "0.4.3",
    "mocha": "2.5.3",
    "readable-stream": "2.1.4",
    "supertest": "1.1.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "homepage": "https://github.com/timbarham/send#readme",
  "keywords": [
    "static",
    "file",
    "server"
  ],
  "license": "MIT",
  "name": "send-transform",
  "optionalDependencies": {},
  "readme": "# send-transform\r\n\r\nSend-transform is a modified version of the [send](https://www.npmjs.org/package/send)\r\nlibrary for streaming files from the file system as a http response supporting partial\r\nresponses (Ranges), conditional-GET negotiation, high test coverage, and granular\r\nevents which may be leveraged to take appropriate actions in your application or framework.\r\n\r\nThis modified version of send supports specifying a transform function that takes\r\nthe file stream as input, and produces a new (transformed) stream as ouput. See\r\nbelow for more information.\r\n\r\nLooking to serve up entire folders mapped to URLs? Try [serve-static](https://www.npmjs.org/package/serve-static).\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install send-transform\r\n```\r\n\r\n## API\r\n\r\n```js\r\nvar send = require('send-transform')\r\n```\r\n\r\n### send(req, path, [options])\r\n\r\nCreate a new `SendStream` for the given path to send to a `res`. The `req` is\r\nthe Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded,\r\nnot the actual file-system path).\r\n\r\n#### Options\r\n\r\n##### acceptRanges\r\n\r\nEnable or disable accepting ranged requests, defaults to true.\r\nDisabling this will not send `Accept-Ranges` and ignore the contents\r\nof the `Range` request header.\r\n\r\n##### cacheControl\r\n\r\nEnable or disable setting `Cache-Control` response header, defaults to\r\ntrue. Disabling this will ignore the `maxAge` option.\r\n\r\n##### dotfiles\r\n\r\nSet how \"dotfiles\" are treated when encountered. A dotfile is a file\r\nor directory that begins with a dot (\".\"). Note this check is done on\r\nthe path itself without checking if the path actually exists on the\r\ndisk. If `root` is specified, only the dotfiles above the root are\r\nchecked (i.e. the root itself can be within a dotfile when when set\r\nto \"deny\").\r\n\r\n  - `'allow'` No special treatment for dotfiles.\r\n  - `'deny'` Send a 403 for any request for a dotfile.\r\n  - `'ignore'` Pretend like the dotfile does not exist and 404.\r\n\r\nThe default value is _similar_ to `'ignore'`, with the exception that\r\nthis default will not ignore the files within a directory that begins\r\nwith a dot, for backward-compatibility.\r\n\r\n##### end\r\n\r\nByte offset at which the stream ends, defaults to the length of the file\r\nminus 1. The end is inclusive in the stream, meaning `end: 3` will include\r\nthe 4th byte in the stream.\r\n\r\n##### etag\r\n\r\nEnable or disable etag generation.\r\n\r\nDefaults to `true`, unless the `transform` option is set.\r\n\r\n##### extensions\r\n\r\nIf a given file doesn't exist, try appending one of the given extensions,\r\nin the given order. By default, this is disabled (set to `false`). An\r\nexample value that will serve extension-less HTML files: `['html', 'htm']`.\r\nThis is skipped if the requested file already has an extension.\r\n\r\n##### index\r\n\r\nBy default send supports \"index.html\" files, to disable this\r\nset `false` or to supply a new index pass a string or an array\r\nin preferred order.\r\n\r\n##### lastModified\r\n\r\nEnable or disable `Last-Modified` header. Uses the file system's last modified\r\nvalue.\r\n\r\nDefaults to `true`, unless the `transform` option is set.\r\n\r\n##### maxAge\r\n\r\nProvide a max-age in milliseconds for http caching, defaults to 0.\r\nThis can also be a string accepted by the\r\n[ms](https://www.npmjs.org/package/ms#readme) module.\r\n\r\n##### root\r\n\r\nServe files relative to `path`.\r\n\r\n##### start\r\n\r\nByte offset at which the stream starts, defaults to 0. The start is inclusive,\r\nmeaning `start: 2` will include the 3rd byte in the stream.\r\n\r\n##### transform\r\n\r\nA function that consumes the file stream and produces a new (transformed)\r\nstream:\r\n\r\n```javascript\r\nfunction(stream) {return stream.pipe(replaceStream('tobi', 'peter'))}\r\n```\r\n \r\nMultiple transformations are possible: \r\n\r\n```javascript\r\nfunction(stream) {\r\n  return stream\r\n  .pipe(replaceStream('tobi', 'peter'))\r\n  .pipe(replaceStream('peter', 'hans'))\r\n  .pipe(...)\r\n}\r\n```\r\n\r\nWhen a transform is specified, the `lastModified` and `etag` options default to\r\n`false`, but can be overridden when a transform on the file's stream is expected\r\nto always generate the same result. \r\n\r\n#### Events\r\n\r\nThe `SendStream` is an event emitter and will emit the following events:\r\n\r\n  - `error` an error occurred `(err)`\r\n  - `directory` a directory was requested\r\n  - `file` a file was requested `(path, stat)`\r\n  - `headers` the headers are about to be set on a file `(res, path, stat)`\r\n  - `stream` file streaming has started `(stream)`\r\n  - `end` streaming has completed\r\n\r\n#### .pipe\r\n\r\nThe `pipe` method is used to pipe the response into the Node.js HTTP response\r\nobject, typically `send(req, path, options).pipe(res)`.\r\n\r\n### .mime\r\n\r\nThe `mime` export is the global instance of of the\r\n[`mime` npm module](https://www.npmjs.com/package/mime).\r\n\r\nThis is used to configure the MIME types that are associated with file extensions\r\nas well as other options for how to resolve the MIME type of a file (like the\r\ndefault type to use for an unknown file extension).\r\n\r\n## Error-handling\r\n\r\nBy default when no `error` listeners are present an automatic response will be\r\nmade, otherwise you have full control over the response, aka you may show a 5xx\r\npage etc.\r\n\r\n## Caching\r\n\r\nIt does _not_ perform internal caching, you should use a reverse proxy cache\r\nsuch as Varnish for this, or those fancy things called CDNs. If your\r\napplication is small enough that it would benefit from single-node memory\r\ncaching, it's small enough that it does not need caching at all ;).\r\n\r\n## Debugging\r\n\r\nTo enable `debug()` instrumentation output export __DEBUG__:\r\n\r\n```\r\n$ DEBUG=send node app\r\n```\r\n\r\n## Running tests\r\n\r\n```\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\n## Examples\r\n\r\n### Small example\r\n\r\n```js\r\nvar http = require('http')\r\nvar parseUrl = require('parseurl')\r\nvar send = require('send-transform')\r\n\r\nvar app = http.createServer(function onRequest (req, res) {\r\n  send(req, parseUrl(req).pathname).pipe(res)\r\n}).listen(3000)\r\n```\r\n\r\n### Custom file types\r\n\r\n```js\r\nvar http = require('http')\r\nvar parseUrl = require('parseurl')\r\nvar send = require('send-transform')\r\n\r\n// Default unknown types to text/plain\r\nsend.mime.default_type = 'text/plain'\r\n\r\n// Add a custom type\r\nsend.mime.define({\r\n  'application/x-my-type': ['x-mt', 'x-mtt']\r\n})\r\n\r\nvar app = http.createServer(function onRequest (req, res) {\r\n  send(req, parseUrl(req).pathname).pipe(res)\r\n}).listen(3000)\r\n```\r\n\r\n### Serving from a root directory with custom error-handling\r\n\r\n```js\r\nvar http = require('http')\r\nvar parseUrl = require('parseurl')\r\nvar send = require('send')\r\n\r\nvar app = http.createServer(function onRequest (req, res) {\r\n  // your custom error-handling logic:\r\n  function error (err) {\r\n    res.statusCode = err.status || 500\r\n    res.end(err.message)\r\n  }\r\n\r\n  // your custom headers\r\n  function headers (res, path, stat) {\r\n    // serve all files for download\r\n    res.setHeader('Content-Disposition', 'attachment')\r\n  }\r\n\r\n  // your custom directory handling logic:\r\n  function redirect () {\r\n    res.statusCode = 301\r\n    res.setHeader('Location', req.url + '/')\r\n    res.end('Redirecting to ' + req.url + '/')\r\n  }\r\n\r\n  // transfer arbitrary files from within\r\n  // /www/example.com/public/*\r\n  send(req, parseUrl(req).pathname, {root: '/www/example.com/public'})\r\n  .on('error', error)\r\n  .on('directory', redirect)\r\n  .on('headers', headers)\r\n  .pipe(res);\r\n}).listen(3000)\r\n```\r\n\r\n## License \r\n\r\n[MIT](LICENSE)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/timbarham/send.git"
  },
  "scripts": {
    "lint": "eslint **/*.js",
    "test": "mocha --check-leaks --reporter spec --bail",
    "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot"
  },
  "version": "0.14.1"
}
